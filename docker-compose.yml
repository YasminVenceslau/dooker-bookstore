version: '3.9'  # Define a versão do Docker Compose

# Define os serviços (containers) que serão executados
services:
  # =======================
  # Serviço da aplicação Django
  # =======================
  web:
    build: .  # Usa o Dockerfile do diretório atual para construir a imagem
    command: python manage.py runserver 0.0.0.0:8000  # Executa o servidor Django
    volumes:
      - .:/app  # Mapeia o diretório local atual para /app dentro do container
    ports:
      - "8000:8000"  # Mapeia a porta 8000 do host para a 8000 do container
    env_file:
      - ./env.dev  # Carrega variáveis de ambiente do arquivo env.dev
    restart: always  # Reinicia o container automaticamente em caso de falha
    depends_on:
      db:
        condition: service_healthy  # Garante que o banco esteja pronto antes do Django iniciar
    networks:
      - backend  # Coloca o container na rede backend

  # =======================
  # Serviço do banco de dados PostgreSQL
  # =======================
  db:
    image: postgres:15-alpine  # Usa uma imagem leve do Postgres baseada em Alpine Linux
    volumes:
      - postgres_data:/var/lib/postgresql/data/  # Persiste os dados do banco em um volume nomeado
    environment:
      - POSTGRES_USER=dev         # Nome do usuário do banco
      - POSTGRES_PASSWORD=dev     # Senha do banco
      - POSTGRES_DB=bookstore_db  # Nome do banco de dados
    restart: always  # Reinicia automaticamente se o container parar
    healthcheck:  # Verifica periodicamente se o banco está pronto
      test: ["CMD-SHELL", "pg_isready -U dev -d bookstore_db"]
      interval: 10s  # Intervalo entre verificações
      timeout: 5s    # Tempo máximo de espera por resposta
      retries: 5     # Quantas vezes tentar antes de marcar como “não saudável”
    networks:
      - backend  # Mesmo nome de rede, para permitir comunicação com o Django

# =======================
# Definição da rede
# =======================
networks:
  backend:
    driver: bridge  # Tipo de rede padrão (permite comunicação entre containers)

# =======================
# Definição de volumes persistentes
# =======================
volumes:
  postgres_data:  # Volume nomeado que armazena os dados do banco
